package kr.co.inflearn.part2.run;


public class Java_100_Variable_HelloWorld{

	public static void main(String[] args) {
		System.out.println("Hello World~");
	}
}

 /*접근제한자  클래스선언  클래스이름 {
  * 접근제어자 static 반환타입 메서드이름(파라미터)(문자열 배열 변수명) {
  * 구현할 코드 작성
 	}
  }
  */

//(1) 접근제한자 ->public,private,protected,default
//		   	  -> 클래스나 메서드에 접근할 수 있는 범위를 지정 -->접근제한자, 접근제어자
//            -> private>protected>public

//(2) 클래스선언 --> class
//	    	  --> 객체를 생성하는 틀, 프레임, 공장, 템플릿

//(3) 클래스이름 --> 카멜케이스(단어와 단어 사이의 구분 --> 대문자)

//(4) 메서드이름 --> 메서드란? --> 함수 --> 어떤 특정한 동작이나 작업,행위 등을 수행하는 것.

//////////////////////////////////////////////////////////////////////////
//(1) 메인메서드 --> main()--> 만약 다르게 작성하면 기본 메서드를 찾을 수 없다라고 에러 발생--> 기본 메서드(main)작성하라고 함.
//    		  --> 자바 프로그램이 실행되면 제일 먼저 메인 메서드를 찾아서 실행.
//   		  --> 길게 작성된 소스에서 그 프로그램의 시작이 어딘지 알 수 없으면 안되므로 시작점을 알려주는 용도 -->entry point-->main()

//(2) 파라미터스 --> 메서드(함수) 호출시 하나 or 둘 이상의 파라미터 값을 넣어서 호출할 수 있음.
//            --> 그러한 인수(파라미터)들의 값을 저장할 변수(바구니)들을 명시.
//			  --> String --> 문자열 -->[]배열 --> args --> argument(논의,논쟁,언쟁,말다툼,주장; 인수,독립 변수)
// 			  --> args는 하나의 변수명일 뿐이므로 임의의 이름을 지정해도 무방.

//(3) 반환할 타입 --> return type --> 반환할 값이 있냐? 없냐? --> 없으면 void(빈 공간, 공허함,empty)
//	   		  --> 이 메서드(함수)는 호출하면 결과로써 특별히 반환되는 값은 없이 수행되는 메서드.

//////////////////////////////////////////////////////////////////////////////////////////
// - static으로 선언된 함수(메서드)나 변수는 자바 버추얼 머신에서 인스턴스 객체의 생성 없이 호출을 할 수 있다.
// - 쉽게 말해서, 객체 생성없이 해당 함수(메서드)를 호출해서 사용할 수 있다.
// - 자바 프로그램을 실행하면 static으로 지정된 메서드를 찾아서 먼저 메모리에 할당시킨다.
// - static으로 지정된 메서드가 여러개인 경우에는 객체를 생성하는 것과 상관없이 모두 메모리에 할당시킨다.
// - 그런 후에, "main"으로 이름이 만들어진 메서드가 있는지를 찾아서 그 메서드(main 메서드)를 가장 먼저 시작점의 메서드로써 호출을 하게 되는 것이다.

